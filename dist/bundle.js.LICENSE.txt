//!  -------------根据fiberTree创建html------------------

//! ---------- unmount阶段 -------------------------

//! -----------------模拟Commit阶段-----------------------------

//! ----------------模拟render部分------------------------

//! ----------拿取需要本次update需要更新的hook----------------------

//! --------组件对应的fiber---------------------

//! -------mountEffect(useEffect第一次执行)-------------

//! -----需要使用的全局变量---------------

//! before 前置处理  mutation 渲染dom节点   layout  处理useEffect useLayoutEffect

//! render分为2部分  render阶段 - commit阶段  最后unmount

//! 使用{addNun} 挂载到全局方法

//! 分为三部分  beforeMutation  mutation  layout阶段

//! 创建fiberNode树(Vnode树)

//! 字符串扫描解析器

//! 对标签中的属性进行处理 给dom节点添加标签 (未完成)

//! 将html模板字符串转换成tokens数组

//! 将tokens数组形成dom树形结构

//! 将tokens树转化为虚拟dom树

//! 将拆分好的kv数组转换成键值对放入props

//! 总和方法 转换html模板为虚拟dom

//! 拆分html中的事件  (键值对)

//! 拆分html中的属性  (键值对)

//! 挂载更新好的fiberTree到全局

//! 更改并生成fiber树  (结束后fiber由mount变为update)

//! 深度优先遍历vnode树  包装成fiberNode

//! 略过=符号  从下一位开始

//! 赋值虚拟节点的属性给fiberNode

//!--------------Render方法-------------------

//!根据fiberTree创建html

//!过滤空格和换行
